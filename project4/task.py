# -*- coding: utf-8 -*-
"""
Created on Mon Feb  8 18:23:04 2016

@author: Abhinav
"""
import numpy as np
import numpy.linalg as la
import math

#%%

def wget(points, y, m):
    global factor
    
    n = len(points) # no. of points
    
    for i in range(n):
        points[i] = points[i]+(1,)
    
    p = len(points[0]) # no. of dimensions
    eta = 0.01
    convergence = 0.1
    
    x = np.zeros((n,p))
    llw = np.zeros(p)    # differenciation of lw
    wt = np.zeros(p)
    
    for i in points:
        x[points.index(i)] = i
        x[points.index(i)][1] /= factor
    
    for i in range(m):
        for j in range(p):
            llw[j] = np.sum([(y[k] * x[k][j])/(1 + math.exp(y[k] * np.inner(wt,x[k]))) for k in range(n)]) * -1  
    
        if la.norm(llw) < convergence:
            break
        else:        
            wt = wt - eta * llw 
                
    return wt
    
#%%

points = []
y = []
m=35000
factor = 1

points.append((2,1))
y.append(-1)
points.append((1,20))
y.append(-1)
points.append((1,5))
y.append(-1)

points.append((4,1))
y.append(1)
points.append((1,40))
y.append(1)
points.append((3,30))
y.append(1)

#wt = wget(points, y, m)

#%% part 2

def plotting(wt):
    global x
    global y
    global factor
    global n
    import matplotlib.pyplot as plt
    
    plt.axis([0, 5, 0, 50/factor])
    t = np.arange(0, 5, 0.5)
    plt.plot([x[i][0] for i in range(n) if y[i]<0], [x[i][1] for i in range(n) if y[i]<0], 'ro')
    plt.plot([x[i][0] for i in range(n) if y[i]>0], [x[i][1] for i in range(n) if y[i]>0], 'bo')
    plt.plot(t, (-1*wt[2] - 1*wt[0]*t)/wt[1],'g--')
    
    plt.show()

#%%
points = [(14.23,1.71),(13.2,1.78),(13.16,2.36),(14.37,1.95),(13.24,2.59),(14.2,1.76),(14.39,1.87),(14.06,2.15),(14.83,1.64),(13.86,1.35),(14.1,2.16),(14.12,1.48),(13.75,1.73),(14.75,1.73),(14.38,1.87),(13.63,1.81),(14.3,1.92),(13.83,1.57),(14.19,1.59),(13.64,3.1),(14.06,1.63),(12.93,3.8),(13.71,1.86),(12.85,1.6),(13.5,1.81),(13.05,2.05),(13.39,1.77),(13.3,1.72),(13.87,1.9),(14.02,1.68),(13.73,1.5),(13.58,1.66),(13.68,1.83),(13.76,1.53),(13.51,1.8),(13.48,1.81),(13.28,1.64),(13.05,1.65),(13.07,1.5),(14.22,3.99),(13.56,1.71),(13.41,3.84),(13.88,1.89),(13.24,3.98),(13.05,1.77),(14.21,4.04),(14.38,3.59),(13.9,1.68),(14.1,2.02),(13.94,1.73),(12.33,1.1),(12.64,1.36),(13.67,1.25),(12.37,1.13),(12.17,1.45),(12.37,1.21),(13.11,1.01),(12.37,1.17),(13.34,0.94),(12.21,1.19),(12.29,1.61),(13.86,1.51),(13.49,1.66),(12.99,1.67),(11.96,1.09),(11.66,1.88),(13.03,0.9),(11.84,2.89),(12.33,0.99),(12.7,3.87),(12,0.92),(12.72,1.81),(12.08,1.13),(13.05,3.86),(11.84,0.89),(12.67,0.98),(12.16,1.61),(11.65,1.67),(11.64,2.06),(12.08,1.33),(12.08,1.83),(12,1.51),(12.69,1.53),(12.29,2.83),(11.62,1.99),(12.47,1.52),(11.81,2.12),(12.29,1.41),(12.37,1.07),(12.29,3.17),(12.08,2.08),(12.6,1.34),(12.34,2.45),(11.82,1.72),(12.51,1.73),(12.42,2.55),(12.25,1.73),(12.72,1.75),(12.22,1.29),(11.61,1.35)]
e = [(2.29,5.64),
(1.28,4.38) ,
(2.81,5.68) ,
(2.18,7.8 ) ,
(1.82,4.32) ,
(1.97,6.75) ,
(1.98,5.25) ,
(1.25,5.05) ,
(1.98,5.2 ) ,
(1.85,7.22) ,
(2.38,5.75) ,
(1.57,5   ) ,
(1.81,5.6 ) ,
(2.81,5.4 ) ,
(2.96,7.5 ) ,
(1.46,7.3 ) ,
(1.97,6.2 ) ,
(1.72,6.6 ) ,
(1.86,8.7 ) ,
(1.66,5.1 ) ,
(2.1,5.65 ) ,
(1.98,4.5 ) ,
(1.45,4.8 ) ,
(1.76,4.5 ) ,
(1.98,4.7 ) ,
(1.62,4.8 ) ,
(2.38,5.7 ) ,
(1.95,6.9 ) ,
(1.35,5.4 ) ,
(1.54,4.2 ) ,
(1.86,5.1 ) ,
(1.36,4.6 ) ,
(1.44,4.25) ,
(2.08,5.1 ) ,
(2.34,6.13) ,
(1.48,4.28) ,
(1.7,5.43 ) ,
(1.66,4.36) ,
(2.03,5.04) ,
(1.25,5.24) ,
(2.19,4.9 ) ,
(2.14,6.1 ) ,
(2.38,6.2 ) ,
(2.08,8.9 ) ,
(2.91,7.2 ) ,
(2.29,5.6 ) ,
(1.87,7.05) ,
(1.68,6.3 ) ,
(1.62,5.85) ,
(2.45,6.25) ,
(2.03,6.38) ,
(1.66,6   ) ,
(2.04,6.8 ) ,
(0.42,1.95) ,
(0.41,3.27) ,
(1.37,3.7 ),
(1.97,3.84) ,
(1.63,	3.3 ),
(1.05,	2.8 ),
(2.08,	2.7 ) ,
(1.03,2.95) ,
(1.63,	3.4 ) ,
(3.58,	2.9 ) ,
(1.48,	2.94) ,
(0.42,3.17) ,
(2.5,2.85 ) ,
(1.46,3.05) ,
(1.87,3.38) ,
(1.42,	2.7 ) ,
(1.96,3.35) ,
(1.65,3.21) ,
(1.42,	2.06) ,
(2.49,	2.65) ,
(0.95,2.65) ,
(2.76,3.4 ) ,
(1.95,2.57) ,
(1.43,2.5 ) ,
(1.22,	2   ) ,
(1.4,2.2  ) ,
(2.35,3.05) ,
(1.46,2.62) ,
(1.56,2.45) ,
(1.34,2.6 ) ,
(1.35,2.8 ) ,
(1.38,1.74) ,
(1.64,2.4 ) ,
(1.63,3.6 ) ,
(1.62,3.05) ,
(1.99,2.15) ,
(1.35,3.25) ,
(3.28,2.6 ) ,
(1.56,2.5 ) ,
(1.77,2.9 ) ,
(2.01,	1.9),
(1.53,	1.95),
(1.61,	2.06),
(0.83,	3.4),
(1.87,	1.28),
(1.83,	3.25),
(1.31,	2.8)]




y = []
y = [-1 for i in range(50)]

for i in range(50):
    y.append(1)

#%%

n = len(points) # no. of points

for i in range(n):
    points[i] = points[i]+(1,)

p = len(points[0]) # no. of dimensions
eta = 0.0002
convergence = 0.1

x = np.zeros((n,p))
llw = np.zeros(p)    # differenciation of lw
wt = np.zeros(p)

for i in points:
    x[points.index(i)] = i
    x[points.index(i)][1] /= factor
    #temp = x[points.index(i)][0]
    #x[points.index(i)][0] = x[points.index(i)][1]
    #x[points.index(i)][1] = temp

for i in range(m):
    for j in range(p):
        llw[j] = np.sum([(y[k] * x[k][j])/(1 + math.exp(y[k] * np.inner(wt,x[k]))) for k in range(n)]) * -1  

    if la.norm(llw) < convergence:
        break
    else:        
        wt = wt - eta * llw    
        
    #if i == 103:
        #break
    #if i == 1000:
    #    plotting(wt)
        
#plotting(wt)
        
#%%
import matplotlib.pyplot as plt

plt.axis([10, 15, 0, 5/factor])
t = np.arange(0, 100, 0.5)
plt.plot([x[i][0] for i in range(n) if y[i]<0], [x[i][1] for i in range(n) if y[i]<0], 'ro')
plt.plot([x[i][0] for i in range(n) if y[i]>0], [x[i][1] for i in range(n) if y[i]>0], 'bo')
plt.plot(t, (-1*wt[2] - 1*wt[0]*t)/wt[1],'g--')

plt.show()


